## Autogenerated by Scribe. DO NOT MODIFY.

name: 'User permissions'
description: ''
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/permissions
    metadata:
      groupName: 'User permissions'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get permissions group list'
      description: 'Return permissions list.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      size:
        name: size
        description: 'Number of rows. Default: 50'
        required: false
        example: 3
        type: integer
        custom: []
      page:
        name: page
        description: 'Number of page (pagination). Default: 1'
        required: false
        example: 11
        type: integer
        custom: []
    cleanQueryParameters:
      size: 3
      page: 11
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"total_rows": 100, "total_pages": "4", "current_page": 1, "has_more": true, "data": [{"id":1,"name":"Example group name","permissions":[{"name": "module name", "perm": ["list","create"]}], "is_default": 0, "can_delete": 1}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: api/v1/permission
    metadata:
      groupName: 'User permissions'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Create new persmission group'
      description: |-
        Create new persmission group. Permissions should look like this:
        projects:list,create,update,delete;users:list
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Group permission name.'
        required: true
        example: animi
        type: string
        custom: []
      permissions:
        name: permissions
        description: Permission.
        required: true
        example: odit
        type: string
        custom: []
      is_default:
        name: is_default
        description: 'Set permission default.'
        required: false
        example: false
        type: boolean
        custom: []
    cleanBodyParameters:
      name: animi
      permissions: odit
      is_default: false
    fileParameters: []
    responses:
      -
        status: 422
        content: '{"error":true,"message":"''projects:'' does not contain a list of items.","errors":{"permissions":["''projects:'' does not contain a list of items."]}}'
        headers: []
        description: ''
        custom: []
    responseFields:
      id:
        name: id
        description: 'The id of the newly created permission group'
        required: false
        example: null
        type: integer
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/permission/{id}'
    metadata:
      groupName: 'User permissions'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Get persmission group details'
      description: 'Get persmission group details.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Permission group identifier.'
        required: true
        example: 6
        type: integer
        custom: []
    cleanUrlParameters:
      id: 6
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"id":1,"name":"Example group name","permissions":{"module":["list","create"]}, "is_default": 0, "can_delete": 1}'
        headers: []
        description: ''
        custom: []
      -
        status: 404
        content: '{"error":true,"message":"Permission does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/permission/{id}'
    metadata:
      groupName: 'User permissions'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Update persmission group'
      description: 'Update persmission group.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Permission group identifier.'
        required: true
        example: 18
        type: integer
        custom: []
    cleanUrlParameters:
      id: 18
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'Group permission name.'
        required: false
        example: est
        type: string
        custom: []
      permissions:
        name: permissions
        description: Permission.
        required: false
        example: in
        type: string
        custom: []
      is_default:
        name: is_default
        description: 'Set permission default.'
        required: false
        example: false
        type: boolean
        custom: []
    cleanBodyParameters:
      name: est
      permissions: in
      is_default: false
    fileParameters: []
    responses: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/permission/{id}'
    metadata:
      groupName: 'User permissions'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete persmission group'
      description: 'Delete persmission group.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Permission group identifier.'
        required: true
        example: 7
        type: integer
        custom: []
    cleanUrlParameters:
      id: 7
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"Permission does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Delete status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
    uri: 'api/v1/permission/{id}/add'
    metadata:
      groupName: 'User permissions'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Add permission to persmission group'
      description: 'Add permission to persmission group.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Permission group identifier.'
        required: true
        example: 2
        type: integer
        custom: []
    cleanUrlParameters:
      id: 2
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      object:
        name: object
        description: 'Object name.'
        required: true
        example: nulla
        type: string
        custom: []
      action:
        name: action
        description: 'Action name (if not set, allow all actions).'
        required: false
        example: voluptatem
        type: string
        custom: []
    cleanBodyParameters:
      object: nulla
      action: voluptatem
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"Permission does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Update status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/permission/{id}/del'
    metadata:
      groupName: 'User permissions'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete permission from persmission group'
      description: 'Delete permission from persmission group.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters:
      id:
        name: id
        description: 'Permission group identifier.'
        required: true
        example: 12
        type: integer
        custom: []
    cleanUrlParameters:
      id: 12
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      object:
        name: object
        description: 'Object name.'
        required: true
        example: qui
        type: string
        custom: []
      action:
        name: action
        description: 'Action name (if not set, allow all actions).'
        required: false
        example: dolor
        type: string
        custom: []
    cleanBodyParameters:
      object: qui
      action: dolor
    fileParameters: []
    responses:
      -
        status: 404
        content: '{"error":true,"message":"Permission does not exist"}'
        headers: []
        description: ''
        custom: []
    responseFields:
      status:
        name: status
        description: 'Delete status'
        required: false
        example: null
        type: boolean
        custom: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: api/v1/permission/modules
    metadata:
      groupName: 'User permissions'
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Return permission modules'
      description: 'Return permission modules'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
      'Authorization:': 'Bearer {TOKEN}'
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"permissions":[{"name": "module name", "perm": ["list","create"]}]}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
